# This will probably fail if the way "ask" interacts with
# the RNG changes.  If this fails, all the model checksums
# are likely to change, too. - ST 1/9/07
AskRNG_2D
  O> random-seed 0
  O> ask n-of 4 patches [ sprout 1 ]
  [(list xcor ycor color heading)] of turtle 0 => [3 3 95 57]
  [(list xcor ycor color heading)] of turtle 1 => [5 2 95 200]
  [(list xcor ycor color heading)] of turtle 2 => [3 2 125 236]
  [(list xcor ycor color heading)] of turtle 3 => [-4 3 25 215]

AskRNG_3D
  O> random-seed 0
  O> ask n-of 4 patches [ sprout 1 ]
  [(list xcor ycor zcor color heading)] of turtle 0 => [-2 -4 1 35 186]
  [(list xcor ycor zcor color heading)] of turtle 1 => [5 3 4 25 115]
  [(list xcor ycor zcor color heading)] of turtle 2 => [3 4 5 35 249]
  [(list xcor ycor zcor color heading)] of turtle 3 => [-5 3 0 85 348]

# version 1: use 1-input procedure to terminate the recursion
RecursiveCallInsideAsk1
  globals [ glob1 ]
  to go1 crt 1 go2 5 crt 1 end
  to go2 [x] ask turtle 0 [ set glob1 glob1 + 1 if x > 0 [ go2 (x - 1) ] ] end
  O> set glob1 0
  O> go1
  count turtles => 2
  glob1 => 6

# version 2: 0-input procedure, use RNG to terminate the recursion
RecursiveCallInsideAsk2
  globals [ glob1 ]
  to go1 crt 1 go2 crt 1 end
  to go2 ask turtle 0 [ set glob1 glob1 + 1 if random 10 > 0 [ go2 ] ] end
  O> set glob1 0
  O> random-seed 0
  O> go1
  count turtles => 2
  glob1 => 27

recursion-over-ask
  turtles-own [tvar]
  to explore if tvar = 0 [ set tvar 1 ask turtles-on neighbors [ explore ] ] end
  O> ask patches [ sprout 1 ]
  O> ask one-of turtles [ explore ]
  any? turtles with [tvar = 0] => false

AskInsideReporterProcedure
  globals [ glob1 ]
  to-report foo ask turtle 1 [ set glob1 who ] report 10 end
  O> crt 2
  [foo] of turtle 0 => 10
  glob1 => 1

AskConcurrentDoesntWorkOnSingleAgent
  globals [ glob1 ]
  O> crt 1 [ set glob1 self ]
  O> ask-concurrent glob1 [ set pcolor red ] => ERROR ASK-CONCURRENT expected input to be an agentset but got the turtle (turtle 0) instead.

AskNobody
  O> ask Nobody [set color blue] => ERROR ASK expected input to be an agent or agentset but got NOBODY instead.
  O> ask one-of patches with [pcolor = blue] [set pcolor red] => ERROR ASK expected input to be an agent or agentset but got NOBODY instead.

AskAllTurtles
  O> crt 1
  O> ask one-of patches [ ask turtles [ die ] ] => ERROR Only the observer can ASK the set of all turtles.
  O> ask one-of turtles [ ask turtles [ die ] ] => ERROR Only the observer can ASK the set of all turtles.

AskAllPatches
  O> crt 1
  O> ask one-of patches [ ask patches [ sprout 1 ] ] => ERROR Only the observer can ASK the set of all patches.
  O> ask one-of turtles [ ask patches [ sprout 1 ] ] => ERROR Only the observer can ASK the set of all patches.

AskWithCarefullyWithRunresult
  globals [ zero ]
  to careful-run [t] ask turtles [ carefully [ show runresult t ] [] ] end
  O> crt 2 careful-run [[] -> 1 / zero]

NestedAsksMaintainOrder_2D
  globals [ check-list ]
  O> resize-world -4 4 -4 4
  O> random-seed 123456
  O> crt 30 [ set color one-of [red yellow white] setxy random-xcor random-ycor ]
  O> set check-list []
  O> ask one-of turtles [ ask other turtles [ set check-list lput who check-list ] ]
  check-list => [17 2 18 27 10 7 5 25 21 20 1 3 24 23 19 14 26 4 22 12 28 6 16 15 13 11 0 29 8]
  O> set check-list []
  O> ask one-of turtles with [color = red] [ ask other turtles [ set check-list lput who check-list ] ]
  check-list => [26 16 15 11 21 18 29 8 2 27 17 13 12 25 28 4 3 24 10 23 0 22 6 14 1 19 9 5 20]
  O> set check-list []
  O> ask one-of turtles with [color = red] [ ask other turtles with [color = yellow] [ set check-list lput who check-list ] ]
  check-list => [1 18 19 15 28 27 10 13 2 11 3]
  O> set check-list []
  O> ask one-of turtles [ ask other turtles in-radius 3 [ set check-list lput who check-list ] ]
  check-list => [25 16 29 15 21 10 17 28 8 27 11 6]
  O> set check-list []
  O> ask turtles with [color = red] [ let turtle-list [] ask other turtles in-radius 3 with [color = yellow] [ set turtle-list lput who turtle-list ] set check-list lput turtle-list check-list ]
  check-list => [[28 13 1 10] [10 28 1 13] [10 11 2 27 1 28] [11 18 2] [11 2 18] [11 28 10 13 2 1] [3 19 11] [19 3 13 1]]
